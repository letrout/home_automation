
# Loads default set of integrations. Do not remove.
default_config:

# Load frontend themes from the themes folder
frontend:
  themes: !include_dir_merge_named themes

# Text to speech
tts:
  - platform: google_translate

#automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

alarm_control_panel:
  - platform: manual
    name: "Home Alarm"
    code: ""
    arming_time: 30
    delay_time: 20
    trigger_time: 4
    disarmed:
      trigger_time: 0
    armed_home:
      arming_time: 0
      delay_time: 0

automation:
  - alias: 'Trigger alarm while armed away'
    trigger:
      - platform: state
        entity_id: binary_sensor.back_door
        to: "active"
    condition:
      - condition: state
        entity_id: alarm_control_panel.home_alarm
        state: arm_away
    action:
      service: alarm_control_panel.alarm_trigger
      target:
        entity_id: alarm_control_panel.home_alarm
  - alias: 'Send notification when alarm triggered'
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        to: "triggered"
    action:
      - service: notify.notify
        data:
          message: "ALARM! The alarm has been triggered"
  - alias: 'Send notification when alarm is Disarmed'
    trigger:
      - platform: state
        entity_id: alarm_control_panel.home_alarm
        to: "disarmed"
    action:
      - service: notify.notify
        data:
          message: "ALARM! The alarm is Disarmed at {{ states('sensor.date_time') }}"

mqtt:
  sensor:
    - unique_id: mbr_temp
      state_topic: "influx/Owens/sensors/#"
      name: Master BR temperature
      unit_of_measurement: 'F'
      value_template: >
        {% if value.split(',')[1].split('=')[1] == 'SCD40' and value.split(',')[3].split('=')[1] == 'mbr' and value.split(',')[4].split(' ')[0].split('=')[1] == 'door' %}
          {{ value.split(' ')[1].split(',')[1].split('=')[1] }}
        {% endif %}

    - unique_id: mbr_humidity
      state_topic: "influx/Owens/sensors/#"
      name: Master BR humidity
      unit_of_measurement: '%'
      value_template: >
        {% if value.split(',')[1].split('=')[1] == 'SCD40' and value.split(',')[3].split('=')[1] == 'mbr' and value.split(',')[4].split(' ')[0].split('=')[1] == 'door' %}
          {{ value.split(' ')[1].split(',')[2].split('=')[1] }}
        {% endif %}

    - unique_id: basement_dc_temp
      state_topic: "Owens/sensors/basement/dc/temp_F"
      name: Basement DC temperature
      unit_of_measurement: 'F'

    - unique_id: basement_dc_humidiy
      state_topic: "Owens/sensors/basement/dc/rel_humidity"
      name: Basement DC humidity
      unit_of_measurement: '%'

    - unique_id: garage_temp
      state_topic: "Owens/sensors/garage/back/temp_F"
      name: Garage temperature
      unit_of_measurement: 'F'

    - unique_id: garage_humidity
      state_topic: "Owens/sensors/garage/back/rel_humidity"
      name: Garage humidity
      unit_of_measurement: '%'

    - unique_id: mbr_pm1.0
      state_topic: "influx/Owens/sensors/#"
      name: Master BR PM1.0
      unit_of_measurement: 'ug/m3'
      value_template: >
        {% if value.split(',')[1].split('=')[1] == 'PMSA003i' and value.split(',')[3].split('=')[1] == 'mbr' and value.split(',')[4].split(' ')[0].split('=')[1] == 'door' %}
          {{ value.split(' ')[1].split(',')[3].split('=')[1] }}
        {% endif %}

    - unique_id: mbr_pm2.5
      state_topic: "influx/Owens/sensors/#"
      name: Master BR PM2.5
      unit_of_measurement: 'ug/m3'
      value_template: >
        {% if value.split(',')[1].split('=')[1] == 'PMSA003i' and value.split(',')[3].split('=')[1] == 'mbr' and value.split(',')[4].split(' ')[0].split('=')[1] == 'door' %}
          {{ value.split(' ')[1].split(',')[4].split('=')[1] }}
        {% endif %}

    - unique_id: mbr_pm10.0
      state_topic: "influx/Owens/sensors/#"
      name: Master BR PM10.0
      unit_of_measurement: 'ug/m3'
      value_template: >
        {% if value.split(',')[1].split('=')[1] == 'PMSA003i' and value.split(',')[3].split('=')[1] == 'mbr' and value.split(',')[4].split(' ')[0].split('=')[1] == 'door' %}
          {{ value.split(' ')[1].split(',')[5].split('=')[1] }}
        {% endif %}

  binary_sensor:
    - unique_id: garage_side_door
      state_topic: "influx/Owens/events/#"
      name: "Garage side door"
      payload_on: 1
      payload_off: 0
      qos: 0
      device_class: door
      value_template: >
        {% if value.split(',')[2].split('=')[1] == 'garage' and value.split(',')[3].split('=')[1] == 'side' %}
          {{ value.split(' ')[1].split('=')[1] }}
        {% endif %}

    - unique_id: garage_main_door
      state_topic: "influx/Owens/events/#"
      name: "Garage main door"
      payload_on: 1
      payload_off: 0
      qos: 0
      device_class: door
      value_template: >
        {% if value.split(',')[2].split('=')[1] == 'garage' and value.split(',')[3].split('=')[1] == 'main' %}
          {{ value.split(' ')[1].split('=')[1] }}
        {% endif %}

    - unique_id: front_door
      state_topic: "influx/Owens/events/#"
      name: Front door
      payload_on: 1
      payload_off: 0
      qos: 0
      device_class: door
      value_template: >
        {% if value.split(',')[2].split('=')[1] == 'library' and value.split(',')[3].split('=')[1] == 'front' %}
          {{ value.split(' ')[1].split('=')[1] }}
        {% endif %}

    - unique_id: back_door
      state_topic: "influx/Owens/events/#"
      name: Back door
      payload_on: 1
      payload_off: 0
      qos: 0
      device_class: door
      value_template: >
        {% if value.split(',')[2].split('=')[1] == 'mud' and value.split(',')[3].split('=')[1] == 'back' %}
          {{ value.split(' ')[1].split('=')[1] }}
        {% endif %}

    - unique_id: kitchen_door
      state_topic: "influx/Owens/events/#"
      name: Kitchen door
      payload_on: 1
      payload_off: 0
      qos: 0
      device_class: door
      value_template: >
        {% if value.split(',')[2].split('=')[1] == 'kitchen' and value.split(',')[3].split('=')[1] == 'deck' %}
          {{ value.split(' ')[1].split('=')[1] }}
        {% endif %}
